# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\UIDesign.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import time
from PyQt5 import QtCore, QtGui, QtWidgets,uic
from PySide6.QtCore import QThread
from PySide6.QtCore import *
from PySide6.QtWidgets import *
from PySide6.QtGui import *
from VideoPlayer import *   
from QEditText import *
from pytube import YouTube
from pytube.exceptions import RegexMatchError
from urllib import request
import pytube.request
import youtube_dl
import os
import time
from ResolutionOption import ResolutionOption
from CustomException import CustomException
os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = ".\\platform\\"

pytube.request.default_range_size = 1048576

class Ui_MainWindow(QWidget):
    update_progress = QtCore.pyqtSignal(int)
    update_status = QtCore.pyqtSignal(str)
    file_size = 0

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(792, 450)
        MainWindow.setWindowFlags(QtCore.Qt.WindowCloseButtonHint |QtCore.Qt.WindowMinimizeButtonHint | QtCore.Qt.WindowMaximizeButtonHint)
        MainWindow.setWindowIcon(QtGui.QIcon('.\\icon\\download.png'))
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.linkEditTxt = MyQTextEdit(self.centralwidget)
        self.linkEditTxt.setGeometry(QtCore.QRect(10, 10, 501, 31))
        self.linkEditTxt.setObjectName("textEdit")
        self.linkEditTxt.setFocus(False)
        self.searchBtn = QtWidgets.QPushButton(self.centralwidget)
        self.searchBtn.setGeometry(QtCore.QRect(680, 10, 101, 31))
        self.searchBtn.setObjectName("pushButton")

        self.searchBtn.clicked.connect(self.loadVideoInformation)

        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setObjectName("progressBar")
        self.progressBar.setGeometry(QtCore.QRect(20,395,772,31))
        self.progressBar.setMinimum(0)
        self.progressBar.setMaximum(100)
        self.progressBar.setValue(0)
        self.progressBar.setEnabled(True)

        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(520, 10, 151, 31))
        self.comboBox.setObjectName("comboBox")

        self.resolution_option = ResolutionOption(self.centralwidget)
        self.resolution_option.setGeometry(QtCore.QRect(10, 60, 772, 340))
        self.resolution_option.setVisible(False)
        self.resolution_option.backBtn.clicked.connect(self.backToVideoPlayer)

        self.videoPlayer = VideoPlayer(self.centralwidget)
        self.videoPlayer.setGeometry(QtCore.QRect(10, 60, 772, 340))
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.setPlaceHolder()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Media Downloader"))
        MainWindow.setWindowIcon(QtGui.QIcon(
            '.\\icon\\download_frame_icon.png'))
        self.searchBtn.setText(_translate("MainWindow", "Search"))
        self.searchBtn.setIcon(QtGui.QIcon('.\\icon\\search.png'))

        comboBoxList = ["Youtube", "Facebook"]       
        self.comboBox.addItems(comboBoxList)
        self.comboBox.setEditable(False)
        #icon youtube
        iconytb = QtGui.QIcon('.\\icon\\youtube.png')
        self.comboBox.setItemIcon(0,iconytb)
        #icon facebook
        iconfb = QtGui.QIcon('.\\icon\\facebook.png')
        self.comboBox.setItemIcon(1,iconfb)

    def setPlaceHolder(self):
        if (self.linkEditTxt.toPlainText() == ""):
            self.linkEditTxt.setText("Paste link here")
            self.linkEditTxt.setStyleSheet("QTextEdit {color:black}")

    def download_from_youtube(self, link):
        print(f'Downloading link: {link}')
        try:
            youtubeObj = YouTube(link, on_progress_callback=self.on_download_progress, on_complete_callback=self.on_finish)
            folder_path = QFileDialog.getExistingDirectory(self, "Select Folder to Save the Video")
            if folder_path:
                currentResolution = self.resolution_option.getResOption()
                temp = youtubeObj.streams.filter(mime_type="video/mp4", resolution=currentResolution)
                stream = temp.first()
                stream.download(folder_path)
            else:
                self.showMessageBox("Please select a folder", "error")
        except Exception as e:
            print("")

    def on_download_progress(self, stream, chunk, bytes_remaining):
        file_size = stream.filesize
        bytes_received = file_size - bytes_remaining
        percentage = int((bytes_received/file_size)*100)
        print(percentage)
        self.progressBar.setValue(percentage)
    
    def on_finish(self, stream, file_path):
        self.showMessageBox("Download Successful", "success")
        self.backToVideoPlayer()
    
    def downloadfromFacebook(self,link):
        print(link) # Print the link to see if it's correct
        quality = self.resolution_option.getCurrentComboBoxItem()
        folder_path = QFileDialog.getExistingDirectory(self, "Select Folder to Save the Video")
        if folder_path:
            try:
                ydl_opts = {
                    'outtmpl': f'{folder_path}/%(title)s.%(ext)s',
                    'format': self.get_selected_quality(quality),
                    'progress_hooks': [self.facebook_download_progress_hook]
                }
                with youtube_dl.YoutubeDL(ydl_opts) as ydl:
                    ydl.download([link])
            except Exception as e:
                print(f"Error: {e}")
        else:
            self.showMessageBox("Please select a folder", "error")

        
    def update_progress(self, progress):
        self.progressBar.setValue(progress)
    
    def get_selected_quality(self, quality):
        """Returns the format code for the selected quality"""
        if quality == "Highest resolution":
            return 'bestvideo[height<=?1080][fps<=?30][vcodec!=?av01][vcodec!=?vp9.2][vcodec!=?vp9.3][vcodec!=?vp9.4][vcodec!=?vp9.5][vcodec!=?vp9.6]+bestaudio/best'
        elif quality == "1080p":
            return 'bestvideo[height<=1080][fps<=30][vcodec!=av01][vcodec!=vp9.2][vcodec!=vp9.3][vcodec!=vp9.4][vcodec!=vp9.5][vcodec!=vp9.6]+bestaudio/best'
        elif quality == "720p":
            return 'bestvideo[height<=720][fps<=30][vcodec!=av01][vcodec!=vp9.2][vcodec!=vp9.3][vcodec!=vp9.4][vcodec!=vp9.5][vcodec!=vp9.6]+bestaudio/best'
        elif quality == "480p":
            return 'bestvideo[height<=480][fps<=30][vcodec!=av01][vcodec!=vp9.2][vcodec!=vp9.3][vcodec!=vp9.4][vcodec!=vp9.5][vcodec!=vp9.6]+bestaudio/best'
        elif quality == "360p":
            return 'bestvideo[height<=360][fps<=30][vcodec!=av01][vcodec!=vp9.2][vcodec!=vp9.3][vcodec!=vp9.4][vcodec!=vp9.5][vcodec!=vp9.6]+bestaudio/best'
        elif quality == "240p":
            return 'bestvideo[height<=240][fps<=30][vcodec!=av01][vcodec!=vp9.2][vcodec!=vp9.3][vcodec!=vp9.4][vcodec!=vp9.5][vcodec!=vp9.6]+bestaudio/best'
        elif quality == "144p":
            return 'bestvideo[height<=144][fps<=30][vcodec!=av01][vcodec!=vp9.2][vcodec!=vp9.3][vcodec!=vp9.4][vcodec!=vp9.5][vcodec!=vp9.6]+bestaudio/best'
        else:
            return 'best'       

    def facebook_download_progress_hook(self, d):
        if d['status'] == 'downloading':
            self.update_progress(int(round(float(d['downloaded_bytes'])/float(d['total_bytes'])*100,1)))
        elif d['status'] == 'finished':
            self.showMessageBox("Download Successful", "success")
            self.backToVideoPlayer()

    def loadVideoInformation(self):
        link = self.linkEditTxt.toPlainText()
        if link:
            if self.checkInternetConnection() == True:
                self.verify_url(link)
                self.searchBtn.setDisabled(True)
                self.linkEditTxt.setDisabled(True)
                self.comboBox.setDisabled(True)
                self.progressBar.setValue(0)
            else:
                self.showMessageBox("Can't connect internet, please check your connection!", "error")
        else:
            self.showMessageBox("Please give a link", "error")

    def set_up_youtube_resolution_option(self, youtubeObj):
        streams = youtubeObj.streams.filter(only_video="video")
        res_list = []
        for stream in streams:
            if stream.mime_type == "video/mp4":
                res_list.append(stream.resolution)
        print(res_list)
        self.resolution_option.setUpComboBox(res_list)
        self.resolution_option.setImageHolder(youtubeObj.thumbnail_url)
        self.resolution_option.setTitle(youtubeObj.title)
        self.resolution_option.downloadBtn.clicked.connect(self.choice)

    def set_up_facebook_resolution_option(self, link):
        with youtube_dl.YoutubeDL({'outtmpl': '%(title)s.%(ext)s'}) as ydl:
            info_dict = ydl.extract_info(link, download=False)
            title = info_dict.get('title', None)
        res_list = ['1080p', '720p', '480p', '360p', '240p', '124p']
        print(title)
        self.resolution_option.setUpComboBox(res_list)
        self.resolution_option.setTitle("No title")
        self.resolution_option.resetImageHolder()
        self.resolution_option.downloadBtn.clicked.connect(self.choice)

    def verify_url(self, link):
        print(f'Downloading link: {link}')
        try:
            if self.comboBox.currentText() == "Youtube":
                youtubeObj = YouTube(link)
                self.resolution_option.setVisible(True)
                self.videoPlayer.setVisible(False)
                self.set_up_youtube_resolution_option(youtubeObj)
            elif self.comboBox.currentText() == "Facebook":
                result = self.check_facebook_link(link)
                if result == True:
                    self.resolution_option.setVisible(True)
                    self.videoPlayer.setVisible(False)
                    self.set_up_facebook_resolution_option(link)
                else:
                    self.invalid_facebook_link()
        except Exception as e:
        # Handle the error here
            self.showMessageBox("Invalid URL", "error")
            print(e)

    def choice(self):
        link = self.linkEditTxt.toPlainText()
        if self.comboBox.currentText() == "Facebook":
            self.downloadfromFacebook(link)
        elif self.comboBox.currentText() == "Youtube":
            self.download_from_youtube(link)

    def check_facebook_link(self, url):
        extractors = youtube_dl.extractor.gen_extractors()
        for e in extractors:
            if e.suitable(url) and e.IE_NAME != 'generic':
                return True
        if "https://fb.watch/" in url:
            return True
        return False
        
    def invalid_facebook_link():
        raise CustomException("Invalid Facebook Video Link")
    
    def showMessageBox(self, message, message_type):
            dlg = QtWidgets.QMessageBox(self)
            if(message_type == "error"):
                dlg.setWindowTitle("Error")
                dlg.setStandardButtons(QtWidgets.QMessageBox.Ok)
                dlg.setIcon(QtWidgets.QMessageBox.Critical)
            elif(message_type == "warning"):
                dlg.setWindowTitle("Warning")
                dlg.setStandardButtons(QtWidgets.QMessageBox.Ok)
                dlg.setIcon(QtWidgets.QMessageBox.Warning)
            elif(message_type == "success"):
                dlg.setWindowTitle("Success")
                dlg.setStandardButtons(QtWidgets.QMessageBox.Ok)
                dlg.setIcon(QtWidgets.QMessageBox.Information)
            dlg.setText(message)
            dlg.exec()

    def backToVideoPlayer(self):
        self.videoPlayer.setVisible(True)
        self.resolution_option.setVisible(False)
        self.comboBox.setEnabled(True)
        self.linkEditTxt.setEnabled(True)
        self.searchBtn.setEnabled(True)
        self.progressBar.setValue(0)

    def checkInternetConnection(self):
        try:
            request.urlopen('https://www.google.com/', timeout=1)
            return True
        except request.URLError as err: 
            return False

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())